steps:
- template: setup_go.yml
  parameters:
    goVersion: '$(go.version)'

- script: |
    go version
    go get -u github.com/jstemmer/go-junit-report
    go get github.com/axw/gocov/gocov
    go get github.com/AlekSi/gocov-xml

    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin latest
  displayName: 'Install Dependencies'

- script: golangci-lint run
  displayName: 'Run Code Quality Checks'

- script: |
    go test -v -coverprofile=coverage.txt -covermode count ./... > test_results.txt
    go-junit-report < test_results.txt > report.xml
  displayName: 'Run Unit Tests'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testRunner: JUnit
    testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml

- script: |
    gocov convert coverage.txt > coverage.json
    gocov-xml < coverage.json > coverage.xml
  displayName: 'Run Code Coverage Tests'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml

- powershell: |
    $junitXml = "junit/unit-test.xml"
    $(Get-Content $junitXml | Out-String) -match 'failures="(.*?)"'
    if ($matches[1] -eq 0)
    {
      Write-Host "No test failures"
    }
    else
    {
      # note that this will produce $LASTEXITCODE=1
      Write-Error "$($matches[1]) tests failed"
    }
  displayName: Check for test failures